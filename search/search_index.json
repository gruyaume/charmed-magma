{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Magma is an open source 4G and 5G core network. Use it to operate your own private mobile network. Magma enables better connectivity by: Allowing operators to offer cellular service without vendor lock-in with a modern, open source core network Enabling operators to manage their networks more efficiently with more automation, less downtime, better predictability, and more agility to add new services and applications Enabling federation between existing MNOs and new infrastructure providers for expanding rural infrastructure Allowing operators who are constrained with licensed spectrum to add capacity and reach by using Wi-Fi and CBRS To learn more about Magma, visit the official website . Charmed Magma Charmed Magma is a distribution of Magma published by Canonical built to work with Juju . It is the easiest way to operate Magma. It provides the simplest setup, integration and lifecycle management options. Works on all clouds : Charmed Magma is not opinionated about your choice of cloud. It can also run on your personnal computer. Integrations : Charmed Magma offers seamless integration between each component and with standard monitoring tools. Automation : Charmed Magma automates the initial setup and most operations. Get started here","title":"Home"},{"location":"#charmed-magma","text":"Charmed Magma is a distribution of Magma published by Canonical built to work with Juju . It is the easiest way to operate Magma. It provides the simplest setup, integration and lifecycle management options. Works on all clouds : Charmed Magma is not opinionated about your choice of cloud. It can also run on your personnal computer. Integrations : Charmed Magma offers seamless integration between each component and with standard monitoring tools. Automation : Charmed Magma automates the initial setup and most operations. Get started here","title":"Charmed Magma"},{"location":"how-to/deploy_charmed_magma_access_gateway/","text":"Deploy Charmed Magma Access Gateway Requirements The Access Gateway must be installed on a Ubuntu machine with the following specifications: Operating System : Ubuntu 20.04 LTS with Linux Kernel 5.4 Processor : x86-64 dual-core processor (around 2GHz clock speed or faster) Memory : 4GB RAM Storage : 32GB or greater SSD Networking : At least two ethernet interfaces ( SGi for internet connectivity and S1 for enodeB connectivity) Danger Installing this charm will affect the target computer's networking configuration. Make sure it is installed on designated hardware (personal computers are strongly discouraged). Info Some clouds like AWS use newer kernel versions by default. If you want to downgrade your kernel, please refer to the following guide . Install Magma Access Gateway Option 1: DHCP network configuration Option 2: Static network configuration Deploy Magma Access Gateway: juju deploy magma-access-gateway-operator --config sgi = enp0s1 --config s1 = enp0s2 Info The interface names will need to be adjusted based on your specific machine. Create a file called agw_config.yaml that contains the following content: --- magma-access-gateway-operator : sgi : enp0s1 sgi-ipv4-address : 192.168.0.2/24 sgi-ipv4-gateway : 192.168.0.1 sgi-ipv6-address : fd7d:3797:378b:a502::2/64 sgi-ipv6-gateway : fd7d:3797:378b:a502::1 s1 : enp0s2 s1-ipv4-address : 192.168.1.2/24 s1-ipv6-address : fd7d:3797:378b:a503::2/64 dns : '[\"8.8.8.8\", \"208.67.222.222\"]' Deploy Magma Access Gateway: juju deploy magma-access-gateway-operator --config agw_config.yaml Info The interface names and IP addresses will need to be adjusted based on your specific machine.","title":"Deploy Charmed Magma Access Gateway"},{"location":"how-to/deploy_charmed_magma_access_gateway/#deploy-charmed-magma-access-gateway","text":"","title":"Deploy Charmed Magma Access Gateway"},{"location":"how-to/deploy_charmed_magma_access_gateway/#requirements","text":"The Access Gateway must be installed on a Ubuntu machine with the following specifications: Operating System : Ubuntu 20.04 LTS with Linux Kernel 5.4 Processor : x86-64 dual-core processor (around 2GHz clock speed or faster) Memory : 4GB RAM Storage : 32GB or greater SSD Networking : At least two ethernet interfaces ( SGi for internet connectivity and S1 for enodeB connectivity) Danger Installing this charm will affect the target computer's networking configuration. Make sure it is installed on designated hardware (personal computers are strongly discouraged). Info Some clouds like AWS use newer kernel versions by default. If you want to downgrade your kernel, please refer to the following guide .","title":"Requirements"},{"location":"how-to/deploy_charmed_magma_access_gateway/#install-magma-access-gateway","text":"Option 1: DHCP network configuration Option 2: Static network configuration Deploy Magma Access Gateway: juju deploy magma-access-gateway-operator --config sgi = enp0s1 --config s1 = enp0s2 Info The interface names will need to be adjusted based on your specific machine. Create a file called agw_config.yaml that contains the following content: --- magma-access-gateway-operator : sgi : enp0s1 sgi-ipv4-address : 192.168.0.2/24 sgi-ipv4-gateway : 192.168.0.1 sgi-ipv6-address : fd7d:3797:378b:a502::2/64 sgi-ipv6-gateway : fd7d:3797:378b:a502::1 s1 : enp0s2 s1-ipv4-address : 192.168.1.2/24 s1-ipv6-address : fd7d:3797:378b:a503::2/64 dns : '[\"8.8.8.8\", \"208.67.222.222\"]' Deploy Magma Access Gateway: juju deploy magma-access-gateway-operator --config agw_config.yaml Info The interface names and IP addresses will need to be adjusted based on your specific machine.","title":"Install Magma Access Gateway"},{"location":"how-to/deploy_charmed_magma_orchestrator/","text":"Deploy Charmed Magma Orchestrator Requirements The Access Gateway must be installed on a Kubernetes cluster with the following specifications: Kubernetes : A cluster with a minimum of 3 Nodes with 2 vCPUs and 8 GB of RAM each. Deploy the magma-orc8r bundle From your Ubuntu machine, create an overlay.yaml file that contains the following content: applications : orc8r-certifier : options : domain : <your domain name> orc8r-nginx : options : domain : <your domain name> tls-certificates-operator : options : generate-self-signed-certificates : true ca-common-name : rootca.<your domain name> Warning This configuration is unsecure because it uses self-signed certificates. Deploy Orchestrator: juju deploy magma-orc8r --overlay overlay.yaml --trust --channel = beta The deployment is completed when all services are in the Active-Idle state. Import the admin operator HTTPS certificate Retrieve the PFX package that contains the certificates to authenticate against Magma Orchestrator: juju scp --container = \"magma-orc8r-certifier\" orc8r-certifier/0:/var/opt/magma/certs/admin_operator.pfx admin_operator.pfx Retrieve the pfx package password: juju run-action orc8r-certifier/leader get-pfx-package-password --wait Info The pfx package was copied to your current working directory. It can now be loaded in your browser or used to make API calls to Magma orchestrator. Setup DNS Retrieve the services that need to be exposed: juju run-action orc8r-orchestrator/leader get-load-balancer-services --wait In your domain registrar, create A records for the following Kubernetes services: Address Hostname <orc8r-bootstrap-nginx External IP> bootstrapper-controller.<your domain> <orc8r-nginx-proxy External IP> api.<your domain> <orc8r-clientcert-nginx External IP> controller.<your domain> <nginx-proxy External IP> *.nms.<your domain> Verify the deployment Get the master organization's username and password: juju run-action nms-magmalte/leader get-master-admin-credentials --wait Confirm successful deployment by visiting https://master.nms.<your domain> and logging in with the admin-username and admin-password outputted here.","title":"Deploy Charmed Magma Orchestrator"},{"location":"how-to/deploy_charmed_magma_orchestrator/#deploy-charmed-magma-orchestrator","text":"","title":"Deploy Charmed Magma Orchestrator"},{"location":"how-to/deploy_charmed_magma_orchestrator/#requirements","text":"The Access Gateway must be installed on a Kubernetes cluster with the following specifications: Kubernetes : A cluster with a minimum of 3 Nodes with 2 vCPUs and 8 GB of RAM each.","title":"Requirements"},{"location":"how-to/deploy_charmed_magma_orchestrator/#deploy-the-magma-orc8r-bundle","text":"From your Ubuntu machine, create an overlay.yaml file that contains the following content: applications : orc8r-certifier : options : domain : <your domain name> orc8r-nginx : options : domain : <your domain name> tls-certificates-operator : options : generate-self-signed-certificates : true ca-common-name : rootca.<your domain name> Warning This configuration is unsecure because it uses self-signed certificates. Deploy Orchestrator: juju deploy magma-orc8r --overlay overlay.yaml --trust --channel = beta The deployment is completed when all services are in the Active-Idle state.","title":"Deploy the magma-orc8r bundle"},{"location":"how-to/deploy_charmed_magma_orchestrator/#import-the-admin-operator-https-certificate","text":"Retrieve the PFX package that contains the certificates to authenticate against Magma Orchestrator: juju scp --container = \"magma-orc8r-certifier\" orc8r-certifier/0:/var/opt/magma/certs/admin_operator.pfx admin_operator.pfx Retrieve the pfx package password: juju run-action orc8r-certifier/leader get-pfx-package-password --wait Info The pfx package was copied to your current working directory. It can now be loaded in your browser or used to make API calls to Magma orchestrator.","title":"Import the admin operator HTTPS certificate"},{"location":"how-to/deploy_charmed_magma_orchestrator/#setup-dns","text":"Retrieve the services that need to be exposed: juju run-action orc8r-orchestrator/leader get-load-balancer-services --wait In your domain registrar, create A records for the following Kubernetes services: Address Hostname <orc8r-bootstrap-nginx External IP> bootstrapper-controller.<your domain> <orc8r-nginx-proxy External IP> api.<your domain> <orc8r-clientcert-nginx External IP> controller.<your domain> <nginx-proxy External IP> *.nms.<your domain>","title":"Setup DNS"},{"location":"how-to/deploy_charmed_magma_orchestrator/#verify-the-deployment","text":"Get the master organization's username and password: juju run-action nms-magmalte/leader get-master-admin-credentials --wait Confirm successful deployment by visiting https://master.nms.<your domain> and logging in with the admin-username and admin-password outputted here.","title":"Verify the deployment"},{"location":"how-to/integrate_charmed_magma_access_gateway_to_orchestrator/","text":"Integrate Charmed Magma Access Gateway with Orchestrator Relate the Access Gateway with the Orchestrator Offer the orchestrator relation outside of the orchestrator model: juju offer orc8r-nginx:orchestrator Configure the Access Gateway to connect to the Orchestrator: juju relate magma-access-gateway-operator [[ <controller>: ] <user>/ ] <model-name>.orc8r-nginx Fetch the Access Gateway's Hardware ID and Challenge Key : juju run-action magma-access-gateway-operator/<unit number> get-access-gateway-secrets --wait Navigate to \"Equipment\" on the NMS via the left navigation bar, hit \"Add Gateway\" on the upper right, and fill out the multi-step modal form. Use the secrets from above for the \"Hardware UUID\" and \"Challenge Key\" fields. Verify the deployment Run the following command: juju run-action magma-access-gateway-operator/<unit number> post-install-checks --wait Success Successful Access Gateway deployment will be indicated by the Magma AGW post-installation checks finished successfully. message.","title":"Integrate Charmed Magma Access Gateway to Orchestrator"},{"location":"how-to/integrate_charmed_magma_access_gateway_to_orchestrator/#integrate-charmed-magma-access-gateway-with-orchestrator","text":"","title":"Integrate Charmed Magma Access Gateway with Orchestrator"},{"location":"how-to/integrate_charmed_magma_access_gateway_to_orchestrator/#relate-the-access-gateway-with-the-orchestrator","text":"Offer the orchestrator relation outside of the orchestrator model: juju offer orc8r-nginx:orchestrator Configure the Access Gateway to connect to the Orchestrator: juju relate magma-access-gateway-operator [[ <controller>: ] <user>/ ] <model-name>.orc8r-nginx Fetch the Access Gateway's Hardware ID and Challenge Key : juju run-action magma-access-gateway-operator/<unit number> get-access-gateway-secrets --wait Navigate to \"Equipment\" on the NMS via the left navigation bar, hit \"Add Gateway\" on the upper right, and fill out the multi-step modal form. Use the secrets from above for the \"Hardware UUID\" and \"Challenge Key\" fields.","title":"Relate the Access Gateway with the Orchestrator"},{"location":"how-to/integrate_charmed_magma_access_gateway_to_orchestrator/#verify-the-deployment","text":"Run the following command: juju run-action magma-access-gateway-operator/<unit number> post-install-checks --wait Success Successful Access Gateway deployment will be indicated by the Magma AGW post-installation checks finished successfully. message.","title":"Verify the deployment"},{"location":"how-to/integrate_charmed_magma_access_gateway_to_srsRAN/","text":"Integrate Charmed Magma Access Gateway to an srsRAN eNodeB To relate Access Gateway to the srsRAN operator : juju relate magma-access-gateway-operator <srsRAN application name>","title":"Integrate Charmed Magma Access Gateway to srsRAN"},{"location":"how-to/integrate_charmed_magma_access_gateway_to_srsRAN/#integrate-charmed-magma-access-gateway-to-an-srsran-enodeb","text":"To relate Access Gateway to the srsRAN operator : juju relate magma-access-gateway-operator <srsRAN application name>","title":"Integrate Charmed Magma Access Gateway to an srsRAN eNodeB"},{"location":"tutorial/01_getting_started/","text":"1. Getting Started Requirements This tutorial has been written to work on Ubuntu: Operating system : Ubuntu 20.04 CPU : 10 cores Memory : 16 GB Storage : 100 GB Installing dependencies First, open a terminal window and install Juju , Multipass , MicroK8s and Kubectl using snap. sudo snap install juju sudo snap install multipass sudo snap install kubectl --classic sudo snap install microk8s --channel = 1 .22/stable --classic Creating the environment On our Ubuntu machine, we will create two virtual machines and a Kubernetes cluster. Virtual machines environment First, let's make sure multipass is configured to use the lxd driver: multipass set local.driver = lxd Now, create 2 virtual machines using multipass. The first one is for the access gateway component: multipass launch --name magma-access-gateway --mem = 4G --disk = 40G --cpus = 2 --network = lxdbr0 20 .04 The second one is for the srsRAN radio component multipass launch --name srsran --mem = 4G --disk = 20G --cpus = 2 20 .04 List the created virtual machines and their addresses: multipass list The result should look like: ubuntu@host:~$ multipass list Name State IPv4 Image magma-access-gateway Running 10 .24.157.76 Ubuntu 20 .04 LTS 10 .209.93.17 srsran Running 10 .24.157.37 Ubuntu 20 .04 LTS Kubernetes environment Add the ubuntu user to the microk8s group: sudo usermod -a -G microk8s ubuntu Modify the ownership of the ~/.kube directory: sudo chown -f -R ubuntu ~/.kube Log in to the microk8s group: newgrp microk8s Enable the following MicroK8s add-ons: microk8s enable dns storage Enable the metallb add-on with a range of any 5 IP addresses: microk8s enable metallb:10.0.1.1-10.0.1.5 Output the kubernetes configuration to a file: microk8s config > config Move the configuration file to your ~/.kube/ directory: mv config ~/.kube/ Validate that you can run kubectl commands: kubectl get nodes The result should look like: ubuntu@host:~$ kubectl get nodes NAME STATUS ROLES AGE VERSION magma-orchestrator Ready <none> 104s v1.25.2","title":"1. Getting Started"},{"location":"tutorial/01_getting_started/#1-getting-started","text":"","title":"1. Getting Started"},{"location":"tutorial/01_getting_started/#requirements","text":"This tutorial has been written to work on Ubuntu: Operating system : Ubuntu 20.04 CPU : 10 cores Memory : 16 GB Storage : 100 GB","title":"Requirements"},{"location":"tutorial/01_getting_started/#installing-dependencies","text":"First, open a terminal window and install Juju , Multipass , MicroK8s and Kubectl using snap. sudo snap install juju sudo snap install multipass sudo snap install kubectl --classic sudo snap install microk8s --channel = 1 .22/stable --classic","title":"Installing dependencies"},{"location":"tutorial/01_getting_started/#creating-the-environment","text":"On our Ubuntu machine, we will create two virtual machines and a Kubernetes cluster.","title":"Creating the environment"},{"location":"tutorial/01_getting_started/#virtual-machines-environment","text":"First, let's make sure multipass is configured to use the lxd driver: multipass set local.driver = lxd Now, create 2 virtual machines using multipass. The first one is for the access gateway component: multipass launch --name magma-access-gateway --mem = 4G --disk = 40G --cpus = 2 --network = lxdbr0 20 .04 The second one is for the srsRAN radio component multipass launch --name srsran --mem = 4G --disk = 20G --cpus = 2 20 .04 List the created virtual machines and their addresses: multipass list The result should look like: ubuntu@host:~$ multipass list Name State IPv4 Image magma-access-gateway Running 10 .24.157.76 Ubuntu 20 .04 LTS 10 .209.93.17 srsran Running 10 .24.157.37 Ubuntu 20 .04 LTS","title":"Virtual machines environment"},{"location":"tutorial/01_getting_started/#kubernetes-environment","text":"Add the ubuntu user to the microk8s group: sudo usermod -a -G microk8s ubuntu Modify the ownership of the ~/.kube directory: sudo chown -f -R ubuntu ~/.kube Log in to the microk8s group: newgrp microk8s Enable the following MicroK8s add-ons: microk8s enable dns storage Enable the metallb add-on with a range of any 5 IP addresses: microk8s enable metallb:10.0.1.1-10.0.1.5 Output the kubernetes configuration to a file: microk8s config > config Move the configuration file to your ~/.kube/ directory: mv config ~/.kube/ Validate that you can run kubectl commands: kubectl get nodes The result should look like: ubuntu@host:~$ kubectl get nodes NAME STATUS ROLES AGE VERSION magma-orchestrator Ready <none> 104s v1.25.2","title":"Kubernetes environment"},{"location":"tutorial/02_deploying_magma_nms/","text":"2. Deploying Magma's network management software Bootstrapping a Juju controller Add the kubernetes cluster to Juju's list of known clouds: juju add-k8s magma-orchestrator-k8s --client Bootstrap a Juju controller: juju bootstrap magma-orchestrator-k8s Add a Juju model: juju add-model magma-orchestrator Deploying Magma Orchestrator Create a file called overlay.yaml : touch overlay.yaml Place the following content into the file: overlay.yaml applications : orc8r-certifier : options : domain : awesome.com orc8r-nginx : options : domain : awesome.com tls-certificates-operator : options : generate-self-signed-certificates : true ca-common-name : rootca.awesome.com Deploy Magma Orchestrator: juju deploy magma-orc8r --overlay overlay.yaml --trust --channel = beta You can see the deployment's status by running juju status . The deployment is completed when all units are in the Active-Idle state. Info This step can take a lot of time, expect at least 10-15 minutes. ubuntu@host:~$ juju status Model Controller Cloud/Region Version SLA Timestamp magma-orchestrator magma-orchestrator-k8s-localhost magma-orchestrator-k8s/localhost 2 .9.35 unsupported 18 :19:48-04:00 [ ... ] Unit Workload Agent Address Ports Message nms-magmalte/0* active idle 10 .1.50.73 nms-nginx-proxy/0* active idle 10 .1.50.75 orc8r-accessd/0* active idle 10 .1.50.76 orc8r-alertmanager-configurer/0* active idle 10 .1.50.81 orc8r-alertmanager/0* active idle 10 .1.50.77 orc8r-analytics/0* active idle 10 .1.50.82 orc8r-bootstrapper/0* active idle 10 .1.50.84 orc8r-certifier/0* active idle 10 .1.50.87 orc8r-configurator/0* active idle 10 .1.50.88 orc8r-ctraced/0* active idle 10 .1.50.89 orc8r-device/0* active idle 10 .1.50.90 orc8r-directoryd/0* active idle 10 .1.50.91 orc8r-dispatcher/0* active idle 10 .1.50.92 orc8r-eventd/0* active idle 10 .1.50.94 orc8r-ha/0* active idle 10 .1.50.95 orc8r-lte/0* active idle 10 .1.50.97 orc8r-metricsd/0* active idle 10 .1.50.99 orc8r-nginx/0* active idle 10 .1.50.102 orc8r-obsidian/0* active idle 10 .1.50.103 orc8r-orchestrator/0* active idle 10 .1.50.106 orc8r-policydb/0* active idle 10 .1.50.107 orc8r-prometheus-cache/0* active idle 10 .1.50.110 orc8r-prometheus-configurer/0* active idle 10 .1.50.116 orc8r-prometheus/0* active idle 10 .1.50.72 orc8r-service-registry/0* active idle 10 .1.50.111 orc8r-smsd/0* active idle 10 .1.50.112 orc8r-state/0* active idle 10 .1.50.115 orc8r-streamer/0* active idle 10 .1.50.117 orc8r-subscriberdb-cache/0* active idle 10 .1.50.119 orc8r-subscriberdb/0* active idle 10 .1.50.118 orc8r-tenants/0* active idle 10 .1.50.120 orc8r-user-grafana/0* active idle 10 .1.50.123 postgresql-k8s/0* active idle 10 .1.50.126 5432 /TCP Pod configured tls-certificates-operator/0* active idle 10 .1.50.121 Getting Access to Magma Orchestrator Retrieve the PFX package that contains the certificates to authenticate against Magma Orchestrator. The pfx package will be copied to your current working directory. juju scp --container = \"magma-orc8r-certifier\" orc8r-certifier/0:/var/opt/magma/certs/admin_operator.pfx admin_operator.pfx Retrieve the PFX package's password: juju run-action orc8r-certifier/leader get-pfx-package-password --wait The output should look like so: ubuntu@host:~$ juju run-action orc8r-certifier/leader get-pfx-package-password --wait unit-orc8r-certifier-0: UnitId: orc8r-certifier/0 id: \"8\" results: password: wufoaMzEU7bg status: completed timing: completed: 2022 -10-27 14 :15:07 +0000 UTC enqueued: 2022 -10-27 14 :15:05 +0000 UTC started: 2022 -10-27 14 :15:06 +0000 UTC If you are using Google Chrome, navigate to chrome://settings/certificates?search=https , click on Import, select the admin_operator.pfx package that we just copied and write in the password that you received. Setupping DNS Retrieve the list of services that need to be exposed: juju run-action orc8r-orchestrator/leader get-load-balancer-services --wait The result should look like so: ubuntu@host:~$ juju run-action orc8r-orchestrator/leader get-load-balancer-services --wait unit-orc8r-orchestrator-0: UnitId: orc8r-orchestrator/0 id: \"4\" results: nginx-proxy: 10 .0.1.1 orc8r-bootstrap-nginx: 10 .0.1.3 orc8r-clientcert-nginx: 10 .0.1.4 orc8r-nginx-proxy: 10 .0.1.2 status: completed timing: completed: 2022 -10-27 13 :53:38 +0000 UTC enqueued: 2022 -10-27 13 :53:37 +0000 UTC started: 2022 -10-27 13 :53:37 +0000 UTC At this point, we have Orchestrator up and running and available on private IP addresses. We will now create entries in your /etc/hosts file so that you can reach Magma Orchestrator via domain names. Here replace the IP addresses with the one that you received: echo \"10.0.1.2 api.awesome.com\" >> /etc/hosts echo \"10.0.1.3 bootstrapper-controller.awesome.com\" >> /etc/hosts echo \"10.0.1.4 controller.awesome.com\" >> /etc/hosts echo \"10.0.1.1 master.nms.awesome.com\" >> /etc/hosts echo \"10.0.1.1 magma-test.nms.awesome.com\" >> /etc/hosts Tip Make sure to follow the corresponding IP/hostname scheme: Address Hostname <orc8r-bootstrap-nginx External IP> bootstrapper-controller.awesome.com <orc8r-nginx-proxy External IP> api.awesome.com <orc8r-clientcert-nginx External IP> controller.awesome.com <nginx-proxy External IP> *.nms.awesome.com Now, navigate to https://master.nms.awesome.com , you should receive a warning because we are using self-signed-certificates, click on \"Proceed\". Verifying the deployment Get the master organization's username and password: juju run-action nms-magmalte/leader get-master-admin-credentials --wait Your result should look like so: ubuntu@host:~$ juju run-action nms-magmalte/leader get-master-admin-credentials --wait unit-nms-magmalte-0: UnitId: nms-magmalte/0 id: \"6\" results: admin-password: oTKcM6G9ylG9 admin-username: admin@juju.com status: completed timing: completed: 2022 -10-27 14 :13:43 +0000 UTC enqueued: 2022 -10-27 14 :13:41 +0000 UTC started: 2022 -10-27 14 :13:43 +0000 UTC Note Your password will be different from the one here Confirm successful deployment by visiting https://master.nms.awesome.com and logging in with the admin-username and admin-password outputted here.","title":"2. Deploying Magma's network management software"},{"location":"tutorial/02_deploying_magma_nms/#2-deploying-magmas-network-management-software","text":"","title":"2. Deploying Magma's network management software"},{"location":"tutorial/02_deploying_magma_nms/#bootstrapping-a-juju-controller","text":"Add the kubernetes cluster to Juju's list of known clouds: juju add-k8s magma-orchestrator-k8s --client Bootstrap a Juju controller: juju bootstrap magma-orchestrator-k8s Add a Juju model: juju add-model magma-orchestrator","title":"Bootstrapping a Juju controller"},{"location":"tutorial/02_deploying_magma_nms/#deploying-magma-orchestrator","text":"Create a file called overlay.yaml : touch overlay.yaml Place the following content into the file: overlay.yaml applications : orc8r-certifier : options : domain : awesome.com orc8r-nginx : options : domain : awesome.com tls-certificates-operator : options : generate-self-signed-certificates : true ca-common-name : rootca.awesome.com Deploy Magma Orchestrator: juju deploy magma-orc8r --overlay overlay.yaml --trust --channel = beta You can see the deployment's status by running juju status . The deployment is completed when all units are in the Active-Idle state. Info This step can take a lot of time, expect at least 10-15 minutes. ubuntu@host:~$ juju status Model Controller Cloud/Region Version SLA Timestamp magma-orchestrator magma-orchestrator-k8s-localhost magma-orchestrator-k8s/localhost 2 .9.35 unsupported 18 :19:48-04:00 [ ... ] Unit Workload Agent Address Ports Message nms-magmalte/0* active idle 10 .1.50.73 nms-nginx-proxy/0* active idle 10 .1.50.75 orc8r-accessd/0* active idle 10 .1.50.76 orc8r-alertmanager-configurer/0* active idle 10 .1.50.81 orc8r-alertmanager/0* active idle 10 .1.50.77 orc8r-analytics/0* active idle 10 .1.50.82 orc8r-bootstrapper/0* active idle 10 .1.50.84 orc8r-certifier/0* active idle 10 .1.50.87 orc8r-configurator/0* active idle 10 .1.50.88 orc8r-ctraced/0* active idle 10 .1.50.89 orc8r-device/0* active idle 10 .1.50.90 orc8r-directoryd/0* active idle 10 .1.50.91 orc8r-dispatcher/0* active idle 10 .1.50.92 orc8r-eventd/0* active idle 10 .1.50.94 orc8r-ha/0* active idle 10 .1.50.95 orc8r-lte/0* active idle 10 .1.50.97 orc8r-metricsd/0* active idle 10 .1.50.99 orc8r-nginx/0* active idle 10 .1.50.102 orc8r-obsidian/0* active idle 10 .1.50.103 orc8r-orchestrator/0* active idle 10 .1.50.106 orc8r-policydb/0* active idle 10 .1.50.107 orc8r-prometheus-cache/0* active idle 10 .1.50.110 orc8r-prometheus-configurer/0* active idle 10 .1.50.116 orc8r-prometheus/0* active idle 10 .1.50.72 orc8r-service-registry/0* active idle 10 .1.50.111 orc8r-smsd/0* active idle 10 .1.50.112 orc8r-state/0* active idle 10 .1.50.115 orc8r-streamer/0* active idle 10 .1.50.117 orc8r-subscriberdb-cache/0* active idle 10 .1.50.119 orc8r-subscriberdb/0* active idle 10 .1.50.118 orc8r-tenants/0* active idle 10 .1.50.120 orc8r-user-grafana/0* active idle 10 .1.50.123 postgresql-k8s/0* active idle 10 .1.50.126 5432 /TCP Pod configured tls-certificates-operator/0* active idle 10 .1.50.121","title":"Deploying Magma Orchestrator"},{"location":"tutorial/02_deploying_magma_nms/#getting-access-to-magma-orchestrator","text":"Retrieve the PFX package that contains the certificates to authenticate against Magma Orchestrator. The pfx package will be copied to your current working directory. juju scp --container = \"magma-orc8r-certifier\" orc8r-certifier/0:/var/opt/magma/certs/admin_operator.pfx admin_operator.pfx Retrieve the PFX package's password: juju run-action orc8r-certifier/leader get-pfx-package-password --wait The output should look like so: ubuntu@host:~$ juju run-action orc8r-certifier/leader get-pfx-package-password --wait unit-orc8r-certifier-0: UnitId: orc8r-certifier/0 id: \"8\" results: password: wufoaMzEU7bg status: completed timing: completed: 2022 -10-27 14 :15:07 +0000 UTC enqueued: 2022 -10-27 14 :15:05 +0000 UTC started: 2022 -10-27 14 :15:06 +0000 UTC If you are using Google Chrome, navigate to chrome://settings/certificates?search=https , click on Import, select the admin_operator.pfx package that we just copied and write in the password that you received.","title":"Getting Access to Magma Orchestrator"},{"location":"tutorial/02_deploying_magma_nms/#setupping-dns","text":"Retrieve the list of services that need to be exposed: juju run-action orc8r-orchestrator/leader get-load-balancer-services --wait The result should look like so: ubuntu@host:~$ juju run-action orc8r-orchestrator/leader get-load-balancer-services --wait unit-orc8r-orchestrator-0: UnitId: orc8r-orchestrator/0 id: \"4\" results: nginx-proxy: 10 .0.1.1 orc8r-bootstrap-nginx: 10 .0.1.3 orc8r-clientcert-nginx: 10 .0.1.4 orc8r-nginx-proxy: 10 .0.1.2 status: completed timing: completed: 2022 -10-27 13 :53:38 +0000 UTC enqueued: 2022 -10-27 13 :53:37 +0000 UTC started: 2022 -10-27 13 :53:37 +0000 UTC At this point, we have Orchestrator up and running and available on private IP addresses. We will now create entries in your /etc/hosts file so that you can reach Magma Orchestrator via domain names. Here replace the IP addresses with the one that you received: echo \"10.0.1.2 api.awesome.com\" >> /etc/hosts echo \"10.0.1.3 bootstrapper-controller.awesome.com\" >> /etc/hosts echo \"10.0.1.4 controller.awesome.com\" >> /etc/hosts echo \"10.0.1.1 master.nms.awesome.com\" >> /etc/hosts echo \"10.0.1.1 magma-test.nms.awesome.com\" >> /etc/hosts Tip Make sure to follow the corresponding IP/hostname scheme: Address Hostname <orc8r-bootstrap-nginx External IP> bootstrapper-controller.awesome.com <orc8r-nginx-proxy External IP> api.awesome.com <orc8r-clientcert-nginx External IP> controller.awesome.com <nginx-proxy External IP> *.nms.awesome.com Now, navigate to https://master.nms.awesome.com , you should receive a warning because we are using self-signed-certificates, click on \"Proceed\".","title":"Setupping DNS"},{"location":"tutorial/02_deploying_magma_nms/#verifying-the-deployment","text":"Get the master organization's username and password: juju run-action nms-magmalte/leader get-master-admin-credentials --wait Your result should look like so: ubuntu@host:~$ juju run-action nms-magmalte/leader get-master-admin-credentials --wait unit-nms-magmalte-0: UnitId: nms-magmalte/0 id: \"6\" results: admin-password: oTKcM6G9ylG9 admin-username: admin@juju.com status: completed timing: completed: 2022 -10-27 14 :13:43 +0000 UTC enqueued: 2022 -10-27 14 :13:41 +0000 UTC started: 2022 -10-27 14 :13:43 +0000 UTC Note Your password will be different from the one here Confirm successful deployment by visiting https://master.nms.awesome.com and logging in with the admin-username and admin-password outputted here.","title":"Verifying the deployment"},{"location":"tutorial/03_deploying_the_4g_core/","text":"3. Deploying the 4G core Bootstrapping a new Juju controller First, list all the network interfaces that magma-access-gateway has: multipass exec magma-access-gateway -- ip -br address show scope global The result should look like so: ubuntu@host:~$ multipass exec magma-access-gateway -- ip -br address show scope global enp5s0 UP 10 .24.157.76/24 fd42:c027:d54:8986:5054:ff:feb4:d6b2/64 enp6s0 UP 10 .209.93.17/24 fd42:74e4:d36e:d16d:5054:ff:feae:17d6/64 Note the two interfaces, enp5s0 and enp6s0 in my example. Yours may vary. From the host, bootstrap a new juju controller: juju bootstrap localhost virtual-machine Info We have now bootstrapped two Juju controllers, one to manage our Kubernetes environment and one to manage our virtual machines environment. From the host, you can always list the controllers by running juju controllers and you can switch from one to the other using juju switch <controller name> . Copy the magma-access-gateway private ssh key to your host's home directory and change its permission for it to be usable by juju: sudo cp /var/snap/multipass/common/data/multipassd/ssh-keys/id_rsa . sudo chmod 600 id_rsa sudo chown $USER id_rsa From the virtual-machine juju controller, add the access-gateway virtual machine to Juju: juju add-machine ssh:ubuntu@10.24.157.76 --private-key = id_rsa Warning Make sur you use the actual IP address of the magma-access-gateway machine! Validate that the machine is available: juju machines The output should look like: ubuntu@host:~$ juju machines Machine State Address Inst id Series AZ Message 0 started 10 .24.157.76 manual:10.24.157.76 focal Manually provisioned machine Deploying Magma Access Gateway Deploy Access Gateway with the interfaces listed earlier (enp5s0 and enp6s0): juju deploy magma-access-gateway-operator --config sgi = enp5s0 --config s1 = enp6s0 --channel = beta --to 0 You can see the deployment's status by running juju status . The deployment is completed when the application is in the Active-Idle state. This step can take a lot of time, expect at least 10-15 minutes. ubuntu@host:~$ juju status Model Controller Cloud/Region Version SLA Timestamp default virtual-machines localhost/localhost 2 .9.35 unsupported 15 :46:28-04:00 App Version Status Scale Charm Channel Rev Exposed Message magma-access-gateway-operator active 1 magma-access-gateway-operator beta 14 no Unit Workload Agent Machine Public address Ports Message magma-access-gateway-operator/0* active idle 0 10 .24.157.241 Machine State Address Inst id Series AZ Message 0 started 10 .24.157.241 manual:10.24.157.241 focal Manually provisioned machine","title":"3. Deploying the 4G core"},{"location":"tutorial/03_deploying_the_4g_core/#3-deploying-the-4g-core","text":"","title":"3. Deploying the 4G core"},{"location":"tutorial/03_deploying_the_4g_core/#bootstrapping-a-new-juju-controller","text":"First, list all the network interfaces that magma-access-gateway has: multipass exec magma-access-gateway -- ip -br address show scope global The result should look like so: ubuntu@host:~$ multipass exec magma-access-gateway -- ip -br address show scope global enp5s0 UP 10 .24.157.76/24 fd42:c027:d54:8986:5054:ff:feb4:d6b2/64 enp6s0 UP 10 .209.93.17/24 fd42:74e4:d36e:d16d:5054:ff:feae:17d6/64 Note the two interfaces, enp5s0 and enp6s0 in my example. Yours may vary. From the host, bootstrap a new juju controller: juju bootstrap localhost virtual-machine Info We have now bootstrapped two Juju controllers, one to manage our Kubernetes environment and one to manage our virtual machines environment. From the host, you can always list the controllers by running juju controllers and you can switch from one to the other using juju switch <controller name> . Copy the magma-access-gateway private ssh key to your host's home directory and change its permission for it to be usable by juju: sudo cp /var/snap/multipass/common/data/multipassd/ssh-keys/id_rsa . sudo chmod 600 id_rsa sudo chown $USER id_rsa From the virtual-machine juju controller, add the access-gateway virtual machine to Juju: juju add-machine ssh:ubuntu@10.24.157.76 --private-key = id_rsa Warning Make sur you use the actual IP address of the magma-access-gateway machine! Validate that the machine is available: juju machines The output should look like: ubuntu@host:~$ juju machines Machine State Address Inst id Series AZ Message 0 started 10 .24.157.76 manual:10.24.157.76 focal Manually provisioned machine","title":"Bootstrapping a new Juju controller"},{"location":"tutorial/03_deploying_the_4g_core/#deploying-magma-access-gateway","text":"Deploy Access Gateway with the interfaces listed earlier (enp5s0 and enp6s0): juju deploy magma-access-gateway-operator --config sgi = enp5s0 --config s1 = enp6s0 --channel = beta --to 0 You can see the deployment's status by running juju status . The deployment is completed when the application is in the Active-Idle state. This step can take a lot of time, expect at least 10-15 minutes. ubuntu@host:~$ juju status Model Controller Cloud/Region Version SLA Timestamp default virtual-machines localhost/localhost 2 .9.35 unsupported 15 :46:28-04:00 App Version Status Scale Charm Channel Rev Exposed Message magma-access-gateway-operator active 1 magma-access-gateway-operator beta 14 no Unit Workload Agent Machine Public address Ports Message magma-access-gateway-operator/0* active idle 0 10 .24.157.241 Machine State Address Inst id Series AZ Message 0 started 10 .24.157.241 manual:10.24.157.241 focal Manually provisioned machine","title":"Deploying Magma Access Gateway"},{"location":"tutorial/04_relating_the_orchestrator_to_the_core/","text":"4. Relating the Orchestrator to the 4G core Offering an application endpoint Offer an application endpoint that we will use later for our network core to relate to our orchestrator: juju offer orc8r-nginx:orchestrator Registering Access Gateway with Magma Orchestrator Relate the newly created Magma Access Gateway with the Orchestrator, leveraging the offer we created earlier. ubuntu@host:~$ juju relate magma-access-gateway-operator magma-orchestrator-k8s:magma-orchestrator.orc8r-nginx Wait for the application to go back to Active-Idle : ubuntu@host:~$ juju status Model Controller Cloud/Region Version SLA Timestamp default virtual-machines localhost/localhost 2 .9.35 unsupported 15 :50:07-04:00 SAAS Status Store URL orc8r-nginx active google-gke-2-us-east1 admin/burger.orc8r-nginx App Version Status Scale Charm Channel Rev Exposed Message magma-access-gateway-operator active 1 magma-access-gateway-operator beta 14 no Unit Workload Agent Machine Public address Ports Message magma-access-gateway-operator/0* active idle 0 10 .24.157.241 Machine State Address Inst id Series AZ Message 0 started 10 .24.157.241 manual:10.24.157.241 focal Manually provisioned machine Fetch the Access Gateway's Hardware ID and Challenge Key : ubuntu@host:~$ juju run-action magma-access-gateway-operator/0 get-access-gateway-secrets --wait unit-magma-access-gateway-operator-0: UnitId: magma-access-gateway-operator/0 id: \"8\" results: challenge-key: MHYwEAYHKoZIzj0CAQYFK4EEACIDYgAEto/TpTbUBHpJmIGKzyLSEXtkZ0B9gXpJoBR49jUbj4vy2pO8vdL+0r38kj1NhnGOSF7mnUYwFRFYohodC0jufCYrBhNFmx5KS0qdAHDWzohC4ss7+8zdtkZAToPJvS25 hardware-id: c9cb1e0e-30cc-4f4f-a832-00980c1dd654 status: completed timing: completed: 2022 -10-20 18 :39:52 +0000 UTC enqueued: 2022 -10-20 18 :39:48 +0000 UTC started: 2022 -10-20 18 :39:51 +0000 UTC Your challenge-key and hardware-id will be different from those here. We will use those soon. Creating a network in Magma Orchestrator First, create a network # TODO Then, navigate to \"Equipment\" on the NMS via the left navigation bar, hit \"Add Gateway\" on the upper right, and fill out the multi-step modal form. Use the secrets from above for the \"Hardware UUID\" and \"Challenge Key\" fields. Verifying the Access Gateway deployment Verify that the Access Gateway is properly running: ubuntu@host:~$ juju run-action magma-access-gateway-operator/0 post-install-checks --wait unit-magma-access-gateway-operator-0: UnitId: magma-access-gateway-operator/0 id: \"8\" results: post-install-checks-output: Magma AGW post-installation checks finished successfully. status: completed timing: completed: 2022 -10-20 19 :57:38 +0000 UTC enqueued: 2022 -10-20 19 :57:36 +0000 UTC started: 2022 -10-20 19 :57:38 +0000 UTC Make sure the output is Magma AGW post-installation checks finished successfully.","title":"4. Relating the Orchestrator to the core"},{"location":"tutorial/04_relating_the_orchestrator_to_the_core/#4-relating-the-orchestrator-to-the-4g-core","text":"","title":"4. Relating the Orchestrator to the 4G core"},{"location":"tutorial/04_relating_the_orchestrator_to_the_core/#offering-an-application-endpoint","text":"Offer an application endpoint that we will use later for our network core to relate to our orchestrator: juju offer orc8r-nginx:orchestrator","title":"Offering an application endpoint"},{"location":"tutorial/04_relating_the_orchestrator_to_the_core/#registering-access-gateway-with-magma-orchestrator","text":"Relate the newly created Magma Access Gateway with the Orchestrator, leveraging the offer we created earlier. ubuntu@host:~$ juju relate magma-access-gateway-operator magma-orchestrator-k8s:magma-orchestrator.orc8r-nginx Wait for the application to go back to Active-Idle : ubuntu@host:~$ juju status Model Controller Cloud/Region Version SLA Timestamp default virtual-machines localhost/localhost 2 .9.35 unsupported 15 :50:07-04:00 SAAS Status Store URL orc8r-nginx active google-gke-2-us-east1 admin/burger.orc8r-nginx App Version Status Scale Charm Channel Rev Exposed Message magma-access-gateway-operator active 1 magma-access-gateway-operator beta 14 no Unit Workload Agent Machine Public address Ports Message magma-access-gateway-operator/0* active idle 0 10 .24.157.241 Machine State Address Inst id Series AZ Message 0 started 10 .24.157.241 manual:10.24.157.241 focal Manually provisioned machine Fetch the Access Gateway's Hardware ID and Challenge Key : ubuntu@host:~$ juju run-action magma-access-gateway-operator/0 get-access-gateway-secrets --wait unit-magma-access-gateway-operator-0: UnitId: magma-access-gateway-operator/0 id: \"8\" results: challenge-key: MHYwEAYHKoZIzj0CAQYFK4EEACIDYgAEto/TpTbUBHpJmIGKzyLSEXtkZ0B9gXpJoBR49jUbj4vy2pO8vdL+0r38kj1NhnGOSF7mnUYwFRFYohodC0jufCYrBhNFmx5KS0qdAHDWzohC4ss7+8zdtkZAToPJvS25 hardware-id: c9cb1e0e-30cc-4f4f-a832-00980c1dd654 status: completed timing: completed: 2022 -10-20 18 :39:52 +0000 UTC enqueued: 2022 -10-20 18 :39:48 +0000 UTC started: 2022 -10-20 18 :39:51 +0000 UTC Your challenge-key and hardware-id will be different from those here. We will use those soon.","title":"Registering Access Gateway with Magma Orchestrator"},{"location":"tutorial/04_relating_the_orchestrator_to_the_core/#creating-a-network-in-magma-orchestrator","text":"First, create a network # TODO Then, navigate to \"Equipment\" on the NMS via the left navigation bar, hit \"Add Gateway\" on the upper right, and fill out the multi-step modal form. Use the secrets from above for the \"Hardware UUID\" and \"Challenge Key\" fields.","title":"Creating a network in Magma Orchestrator"},{"location":"tutorial/04_relating_the_orchestrator_to_the_core/#verifying-the-access-gateway-deployment","text":"Verify that the Access Gateway is properly running: ubuntu@host:~$ juju run-action magma-access-gateway-operator/0 post-install-checks --wait unit-magma-access-gateway-operator-0: UnitId: magma-access-gateway-operator/0 id: \"8\" results: post-install-checks-output: Magma AGW post-installation checks finished successfully. status: completed timing: completed: 2022 -10-20 19 :57:38 +0000 UTC enqueued: 2022 -10-20 19 :57:36 +0000 UTC started: 2022 -10-20 19 :57:38 +0000 UTC Make sure the output is Magma AGW post-installation checks finished successfully.","title":"Verifying the Access Gateway deployment"},{"location":"tutorial/05_deploying_the_radio_simulator/","text":"5. Deploying a radio simulator TODO","title":"5. Deploying the radio simulator"},{"location":"tutorial/05_deploying_the_radio_simulator/#5-deploying-a-radio-simulator","text":"TODO","title":"5. Deploying a radio simulator"},{"location":"tutorial/06_simulating_user_traffic/","text":"6. Simulating user traffic TODO","title":"6. Simulating user traffic"},{"location":"tutorial/06_simulating_user_traffic/#6-simulating-user-traffic","text":"TODO","title":"6. Simulating user traffic"},{"location":"tutorial/07_destroying_the_environment/","text":"7. Destroying the environment First, destroy the 3 virtual machines that we created: multipass delete --all Then, uninstall all the installed packages: sudo snap remove juju --purge sudo snap remove multipass --purge sudo snap remove kubectl --purge sudo snap remove microk8s --purge","title":"7. Destroying the environment"},{"location":"tutorial/07_destroying_the_environment/#7-destroying-the-environment","text":"First, destroy the 3 virtual machines that we created: multipass delete --all Then, uninstall all the installed packages: sudo snap remove juju --purge sudo snap remove multipass --purge sudo snap remove kubectl --purge sudo snap remove microk8s --purge","title":"7. Destroying the environment"},{"location":"tutorial/overview/","text":"Operate your own private mobile network with Magma Warning This tutorial is under construction! In this tutorial, we will use Juju to deploy Magma's 4G core network as well as a simulated radio and a cellphone from the srsRAN project. Getting Started Deploying Magma's network management software Deploying the 4G core Relating the orchestrator to the core Deploying the radio simulator Simulating user traffic Destroying the environment","title":"Overview"},{"location":"tutorial/overview/#operate-your-own-private-mobile-network-with-magma","text":"Warning This tutorial is under construction! In this tutorial, we will use Juju to deploy Magma's 4G core network as well as a simulated radio and a cellphone from the srsRAN project. Getting Started Deploying Magma's network management software Deploying the 4G core Relating the orchestrator to the core Deploying the radio simulator Simulating user traffic Destroying the environment","title":"Operate your own private mobile network with Magma"}]}